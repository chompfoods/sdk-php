<?php
/**
 * IngredientObjectItems
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Chomp Food Database API Documentation
 *
 * ## Important An **[API key](https://chompthis.com/api/)** is required for access to this API. Get yours at **[https://chompthis.com/api](https://chompthis.com/api/)**.  ### Getting Started   * **[Subscribe](https://chompthis.com/api/#pricing)** to the API.   * Scroll down and click the \"**Authorize**\" button.   * Enter your API key into the \"**value**\" input, click the \"**Authorize**\" button, then click the \"**Close**\" button.   * Scroll down to the section titled \"**default**\" and click on the API endpoint you wish to use.   * Click the \"**Try it out**\" button.   * Enter the information the endpoint requires.   * Click the \"**Execute**\" button.  ### Example    * Branded food response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/branded-food-response-object.json)**   * Ingredient response object: **[View example &raquo;](https://raw.githubusercontent.com/chompfoods/examples/master/ingredient-response-object.json)**  ### How Do I Find My API Key?   * Your API key was sent to the email address you used to create your subscription.   * You will also find your API key in the **[Client Center](https://chompthis.com/api/manage.php)**.   * Read **[this article](https://desk.zoho.com/portal/chompthis/kb/articles/how-do-i-find-my-api-key)** for more information.  ||| | ------- | -------- | | [Knowledge Base](https://desk.zoho.com/portal/chompthis/kb/chomp) | [Pricing](https://chompthis.com/api/) | | [Attribution](https://chompthis.com/api/docs/attribution.php) | [Cost Calculator](https://chompthis.com/api/cost-calculator.php) | | [Terms & License](https://chompthis.com/api/terms.php) | [Database Search](https://chompthis.com/api/lookup.php) | | [Support](https://chompthis.com/api/ticket-new.php) | [Query Builder](https://chompthis.com/api/build.php) | | [Client Center](https://chompthis.com/api/manage.php) | |
 *
 * OpenAPI spec version: 1.0.0-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.14
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * IngredientObjectItems Class Doc Comment
 *
 * @category Class
 * @description An object containing information for this specific item.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IngredientObjectItems implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'IngredientObject_items';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'categories' => 'string[]',
'nutrients' => '\Swagger\Client\Model\IngredientObjectNutrients[]',
'calorie_conversion_factor' => '\Swagger\Client\Model\IngredientObjectCalorieConversionFactor',
'protein_conversion_factor' => 'float',
'diet_labels' => '\Swagger\Client\Model\BrandedFoodObjectDietLabels',
'components' => '\Swagger\Client\Model\IngredientObjectComponents[]',
'portions' => '\Swagger\Client\Model\IngredientObjectPortions[]',
'common_names' => 'string',
'description' => 'string',
'footnote' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'categories' => null,
'nutrients' => null,
'calorie_conversion_factor' => null,
'protein_conversion_factor' => null,
'diet_labels' => null,
'components' => null,
'portions' => null,
'common_names' => null,
'description' => null,
'footnote' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'categories' => 'categories',
'nutrients' => 'nutrients',
'calorie_conversion_factor' => 'calorie_conversion_factor',
'protein_conversion_factor' => 'protein_conversion_factor',
'diet_labels' => 'diet_labels',
'components' => 'components',
'portions' => 'portions',
'common_names' => 'common_names',
'description' => 'description',
'footnote' => 'footnote'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'categories' => 'setCategories',
'nutrients' => 'setNutrients',
'calorie_conversion_factor' => 'setCalorieConversionFactor',
'protein_conversion_factor' => 'setProteinConversionFactor',
'diet_labels' => 'setDietLabels',
'components' => 'setComponents',
'portions' => 'setPortions',
'common_names' => 'setCommonNames',
'description' => 'setDescription',
'footnote' => 'setFootnote'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'categories' => 'getCategories',
'nutrients' => 'getNutrients',
'calorie_conversion_factor' => 'getCalorieConversionFactor',
'protein_conversion_factor' => 'getProteinConversionFactor',
'diet_labels' => 'getDietLabels',
'components' => 'getComponents',
'portions' => 'getPortions',
'common_names' => 'getCommonNames',
'description' => 'getDescription',
'footnote' => 'getFootnote'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['nutrients'] = isset($data['nutrients']) ? $data['nutrients'] : null;
        $this->container['calorie_conversion_factor'] = isset($data['calorie_conversion_factor']) ? $data['calorie_conversion_factor'] : null;
        $this->container['protein_conversion_factor'] = isset($data['protein_conversion_factor']) ? $data['protein_conversion_factor'] : null;
        $this->container['diet_labels'] = isset($data['diet_labels']) ? $data['diet_labels'] : null;
        $this->container['components'] = isset($data['components']) ? $data['components'] : null;
        $this->container['portions'] = isset($data['portions']) ? $data['portions'] : null;
        $this->container['common_names'] = isset($data['common_names']) ? $data['common_names'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['footnote'] = isset($data['footnote']) ? $data['footnote'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Item name as provided by brand owner or as shown on packaging
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets nutrients
     *
     * @return \Swagger\Client\Model\IngredientObjectNutrients[]
     */
    public function getNutrients()
    {
        return $this->container['nutrients'];
    }

    /**
     * Sets nutrients
     *
     * @param \Swagger\Client\Model\IngredientObjectNutrients[] $nutrients An array containing nutrient informatio objects for this food item
     *
     * @return $this
     */
    public function setNutrients($nutrients)
    {
        $this->container['nutrients'] = $nutrients;

        return $this;
    }

    /**
     * Gets calorie_conversion_factor
     *
     * @return \Swagger\Client\Model\IngredientObjectCalorieConversionFactor
     */
    public function getCalorieConversionFactor()
    {
        return $this->container['calorie_conversion_factor'];
    }

    /**
     * Sets calorie_conversion_factor
     *
     * @param \Swagger\Client\Model\IngredientObjectCalorieConversionFactor $calorie_conversion_factor calorie_conversion_factor
     *
     * @return $this
     */
    public function setCalorieConversionFactor($calorie_conversion_factor)
    {
        $this->container['calorie_conversion_factor'] = $calorie_conversion_factor;

        return $this;
    }

    /**
     * Gets protein_conversion_factor
     *
     * @return float
     */
    public function getProteinConversionFactor()
    {
        return $this->container['protein_conversion_factor'];
    }

    /**
     * Sets protein_conversion_factor
     *
     * @param float $protein_conversion_factor The multiplication factor used to calculate protein from nitrogen
     *
     * @return $this
     */
    public function setProteinConversionFactor($protein_conversion_factor)
    {
        $this->container['protein_conversion_factor'] = $protein_conversion_factor;

        return $this;
    }

    /**
     * Gets diet_labels
     *
     * @return \Swagger\Client\Model\BrandedFoodObjectDietLabels
     */
    public function getDietLabels()
    {
        return $this->container['diet_labels'];
    }

    /**
     * Sets diet_labels
     *
     * @param \Swagger\Client\Model\BrandedFoodObjectDietLabels $diet_labels diet_labels
     *
     * @return $this
     */
    public function setDietLabels($diet_labels)
    {
        $this->container['diet_labels'] = $diet_labels;

        return $this;
    }

    /**
     * Gets components
     *
     * @return \Swagger\Client\Model\IngredientObjectComponents[]
     */
    public function getComponents()
    {
        return $this->container['components'];
    }

    /**
     * Sets components
     *
     * @param \Swagger\Client\Model\IngredientObjectComponents[] $components An array of objects containing the constituent parts of a food (e.g. bone is a component of meat)
     *
     * @return $this
     */
    public function setComponents($components)
    {
        $this->container['components'] = $components;

        return $this;
    }

    /**
     * Gets portions
     *
     * @return \Swagger\Client\Model\IngredientObjectPortions[]
     */
    public function getPortions()
    {
        return $this->container['portions'];
    }

    /**
     * Sets portions
     *
     * @param \Swagger\Client\Model\IngredientObjectPortions[] $portions An array of objects containing information on discrete amounts of a food found in this item
     *
     * @return $this
     */
    public function setPortions($portions)
    {
        $this->container['portions'] = $portions;

        return $this;
    }

    /**
     * Gets common_names
     *
     * @return string
     */
    public function getCommonNames()
    {
        return $this->container['common_names'];
    }

    /**
     * Sets common_names
     *
     * @param string $common_names Common names associated with this item. These generally clarify what the item is (e.g. when the brand name is \"BRAND's Spicy Enchilada\" the common name may be \"Chicken enchilada\")
     *
     * @return $this
     */
    public function setCommonNames($common_names)
    {
        $this->container['common_names'] = $common_names;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of this item
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets footnote
     *
     * @return string
     */
    public function getFootnote()
    {
        return $this->container['footnote'];
    }

    /**
     * Sets footnote
     *
     * @param string $footnote Comments on any unusual aspects of this item. Examples might include unusual aspects of the food overall.
     *
     * @return $this
     */
    public function setFootnote($footnote)
    {
        $this->container['footnote'] = $footnote;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
